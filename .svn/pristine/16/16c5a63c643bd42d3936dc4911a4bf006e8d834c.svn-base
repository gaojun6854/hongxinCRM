package hongxinCRM;

import java.util.ArrayList;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class TestSynchronized {
	/*private int threadNo;

	public TestSynchronized(int threadNo) {
		this.threadNo = threadNo;
	}

	public static void main(String[] args) throws Exception {
		for (int i = 0; i < 10; i++) {
			new TestSynchronized(i).start();
			Thread.sleep(1);
		}
	}

	public static synchronized void abc(int threadNo){
		for (int i = 0; i < 1000; i++) {
			System.out.println("NO-" + threadNo + ":" + i);
		}
	}
	public void run() {
		abc(threadNo);
	}*/
	
	private ArrayList<Integer> arrayList = new ArrayList<Integer>();
    private Lock lock = new ReentrantLock();    //注意这个地方
    public static void main(String[] args)  {
        final TestSynchronized test = new TestSynchronized();
         
        new Thread(){
            public void run() {
                test.insert(Thread.currentThread());
            };
        }.start();
         
        new Thread(){
            public void run() {
                test.insert(Thread.currentThread());
            };
        }.start();
    }  
     
    public void insert(Thread thread) {
        lock.lock();
        try {
            System.out.println(thread.getName()+"得到了锁");
            for(int i=0;i<5;i++) {
                arrayList.add(i);
                thread.sleep(400);
            }
        } catch (Exception e) {
            // TODO: handle exception
        }finally {
            System.out.println(thread.getName()+"释放了锁");
            lock.unlock();
    }
}
	
}

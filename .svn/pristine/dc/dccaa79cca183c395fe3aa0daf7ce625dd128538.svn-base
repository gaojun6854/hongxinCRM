package com.hongxin.action.OA;
import java.io.UnsupportedEncodingException;
/**
 * 合约信息
 */
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;
import com.hongxin.entity.CheckReceipts;
import com.hongxin.entity.CustomAccount;
import com.hongxin.entity.CustomBaseInfo;
import com.hongxin.entity.PageBean;
import com.hongxin.entity.TAutoRepay;
import com.hongxin.entity.TPactInfo;
import com.hongxin.entity.TProductInfo;
import com.hongxin.entity.TRebuypactInfo;
import com.hongxin.entity.UserInfo;
import com.hongxin.service.AutoRepayService;
import com.hongxin.service.CheckReceiptsService;
import com.hongxin.service.CustomAccountService;
import com.hongxin.service.CustomBaseInfoService;
import com.hongxin.service.PactInfoService;
import com.hongxin.service.ProductService;
import com.hongxin.service.ReBuyPactService;
import com.hongxin.utils.Date2String8;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

public class PactInfoAction extends ActionSupport{

	private static final long serialVersionUID = 8051545551005559302L;
	@Autowired
	PactInfoService pactInfoService;
	@Autowired
	CustomBaseInfoService customBaseInfoService;
	@Autowired
	ProductService productService;
	@Autowired
	CheckReceiptsService checkReceiptsService;
	@Autowired
	CustomAccountService customAccountService; 
	@Autowired
	AutoRepayService autoRepayService;
	@Autowired
	ReBuyPactService reBuyPactService;
	private TPactInfo pactInfo;
	private TRebuypactInfo rebuypactInfo;
	private CustomBaseInfo customBaseInfo;
	private int page;
	private PageBean<TPactInfo> pageBean;
	
	@Override
	public String execute() throws Exception {
		//查询所有可以购买产品的客户
		List<CustomBaseInfo> customBaseInfos=customBaseInfoService.findAudited();
		ServletActionContext.getRequest().setAttribute("customBaseInfos", customBaseInfos);
		return SUCCESS;
	}

	/**
	 * 查询所有商品信息
	 * @return
	 */
	public String findAllProducts(){
		String id=(String) ServletActionContext.getRequest().getParameter("id");//用户id
		List<TProductInfo>products=productService.findAll();
		CustomBaseInfo cust=customBaseInfoService.getByStrId(id).get(0);
		ServletActionContext.getRequest().setAttribute("products", products);
		ServletActionContext.getRequest().setAttribute("cust", cust);
		return "showProducts";
	}

	/**
	 * 购买产品
	 * @return
	 */
	public String addPactInfo(){
		UserInfo user = (UserInfo) ActionContext.getContext().getSession().get("login_user");
		pactInfo.setManagerNum(Integer.toString(user.getId()));
		pactInfo.setManagerName(user.getName());
		pactInfo.setPactId((String) ServletActionContext.getRequest().getSession().getAttribute("custIDS"));
		String repayFlag=ServletActionContext.getRequest().getParameter("repayFlag");
		//说明是否回购
		if ("01".equals(repayFlag)){ 
			String lastPactId=ServletActionContext.getRequest().getParameter("lastPactId");
			TPactInfo pact=pactInfoService.get(lastPactId);
			pactInfo.setProductInfo(productService.getStrId(pactInfo.getProductId()));
			pactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(pactInfo.getCustId()).get(0));
			TRebuypactInfo rebuyPact=new TRebuypactInfo();
			rebuyPact.setPactId((String) ServletActionContext.getRequest().getSession().getAttribute("custIDS"));
			rebuyPact.setPactDate(Date2String8.date2String(new Date()));
			rebuyPact.setPactTime(Date2String8.time2String());
			rebuyPact.setCustId(pactInfo.getCustId());
			rebuyPact.setInvestType('1');
			rebuyPact.setProductId(pactInfo.getProductId());
			rebuyPact.setFuyouAccout(pactInfo.getProductInfo().getFuyouAccout());
			rebuyPact.setAmount(pactInfo.getAmount());
			rebuyPact.setPurchaseDays("60");
			rebuyPact.setPactEff(Date2String8.date2String(new Date()));
			rebuyPact.setCountEff("20170908");
			rebuyPact.setPactDue("20160908");
			rebuyPact.setContractNumber(pactInfo.getContractNumber());
			rebuyPact.setRateFix(0.80);
			reBuyPactService.save(rebuyPact);
			
			pact.setRebuyFlag("01");
			pact.setRebuyPactid(rebuyPact.getPactId());
			//pactInfoService.saveOrUpdateByEntity(pact);
			
			TAutoRepay autopact=autoRepayService.get(lastPactId);///
			autopact.setRebuyFlag("01");////////////////////////////
			autopact.setRebuyPactid(rebuyPact.getPactId());/////////
			if (pact.getAmount()+pact.getBackMoney()<rebuyPact.getAmount()) {
				ServletActionContext.getRequest().setAttribute("flag", "产品回购金额大于原合同本金+利息,请返回修改");
			}else{
				pactInfoService.saveOrUpdateByEntity(pact);
				autoRepayService.saveOrUpdate(autopact);////////////////	
				////////////////////////////////////////////////////////
				ServletActionContext.getRequest().setAttribute("flag", "产品回购成功");
			}
		}else{
			pactInfoService.save(pactInfo);
			ServletActionContext.getRequest().setAttribute("flag", "产品购买成功");
		}
		List<CustomBaseInfo> customBaseInfos=customBaseInfoService.findAudited();
		ServletActionContext.getRequest().setAttribute("customBaseInfos", customBaseInfos);
		return "success";
	}
	
	

	//线下凭证上传后下一步处理
	public String offLineReviewsUpload(){
		HttpServletRequest request=ServletActionContext.getRequest();
		String custIDS=(String) request.getParameter("param");
		//处理
		TPactInfo pact=pactInfoService.get(custIDS);
		pact.setInvestType('2');
		pact.setPactFlow('7');
		pact.setCheckStart('2');//图片上传成功
		pactInfoService.saveOrUpdateByEntity(pact);
		request.setAttribute("flag","图片凭证信息上传成功");
		List<TPactInfo>pactInfos=pactInfoService.findAllReviews();
		for (TPactInfo tPactInfo : pactInfos) {
			tPactInfo.setProductInfo(productService.getStrId(tPactInfo.getProductId()));
			tPactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(tPactInfo.getCustId()).get(0));
		}
		ServletActionContext.getRequest().setAttribute("pactInfos", pactInfos);
		ServletActionContext.getRequest().setAttribute("away","offline");
		return "onLineReviews";
	}
	
	/**
	 * 图片上传跳转
	 * 
	 */
	public String redirectURL(){
		String pactId=(String) ServletActionContext.getRequest().getParameter("pactId");
		ServletActionContext.getRequest().setAttribute("url", "pact/pactInfo!offLineReviewsUpload.action");//上传图片后跳转的地址
		ServletActionContext.getRequest().setAttribute("custIDS", pactId);//上传图片后跳转的地址
		ServletActionContext.getRequest().getSession().setAttribute("picType", "3");
		return "redirectPicUpload";
	}
	
	
	/**
	 * 线上--线下审核信息查询--全部
	 * @return
	 */
	public String onLineReviews(){
		String offline=ServletActionContext.getRequest().getParameter("offline");//链接加offline代表线下凭证上传
		List<TPactInfo>pactInfos=pactInfoService.findAllReviews();
		for (TPactInfo tPactInfo : pactInfos) {
			tPactInfo.setProductInfo(productService.getStrId(tPactInfo.getProductId()));
			tPactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(tPactInfo.getCustId()).get(0));
		}
		ServletActionContext.getRequest().setAttribute("pactInfos", pactInfos);
		if (offline==null) {
			ServletActionContext.getRequest().setAttribute("away","online");
		}else{
			ServletActionContext.getRequest().setAttribute("away","offline");
		}
		return "onLineReviews";
	}
	/**
	 * 线上审核通过
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	public String onLineReviewsYN(){
		HttpServletRequest request=ServletActionContext.getRequest();
		String param=request.getParameter("param");
		String id=request.getParameter("id");
		String noPassReson=request.getParameter("noPassReson");
		int a=pactInfoService.onLineReviewsYN(id,param,noPassReson);
		if (a==1) {
			
			ServletActionContext.getRequest().setAttribute("flag", "合约线上审核成功");
		}else{
			ServletActionContext.getRequest().setAttribute("flag", "异常,请稍后再试");
		}
		//再次查询所有的合同线上审核信息
		List<TPactInfo>pactInfos=pactInfoService.findAllReviews();
		for (TPactInfo tPactInfo : pactInfos) {
			tPactInfo.setProductInfo(productService.getStrId(tPactInfo.getProductId()));
			tPactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(tPactInfo.getCustId()).get(0));
		}
		ServletActionContext.getRequest().setAttribute("pactInfos", pactInfos);
		ServletActionContext.getRequest().setAttribute("away","online");
		return "onLineReviews";
	}
	
	/**
	 * 线下审核信息查询
	 * @return
	 */
	public String offLinePZReviews(){
		List<TPactInfo>pactInfos=pactInfoService.findAllPZReviews();
		for (TPactInfo tPactInfo : pactInfos) {
			tPactInfo.setProductInfo(productService.getStrId(tPactInfo.getProductId()));
			tPactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(tPactInfo.getCustId()).get(0));
		}
		ServletActionContext.getRequest().setAttribute("pactInfos", pactInfos);
			ServletActionContext.getRequest().setAttribute("away","PZoffline");
		return "onLineReviews";
	}
	
	/**
	 * 对线下凭证审核
	 * @return
	 */
	public String offLineReviewsYN(){
		String param=ServletActionContext.getRequest().getParameter("param");
		String id=ServletActionContext.getRequest().getParameter("id");
		String noPassReson=ServletActionContext.getRequest().getParameter("noPassReson");
		int a=pactInfoService.offLineReviewsYN(id,param,noPassReson);
		if (a==1) {
			ServletActionContext.getRequest().setAttribute("flag", "合约线上审核成功");
		}else{
			ServletActionContext.getRequest().setAttribute("flag", "异常,请稍后再试");
		}
		//再次查询所有的合同线下凭证信息
		List<TPactInfo>pactInfos=pactInfoService.findAllPZReviews();
		for (TPactInfo tPactInfo : pactInfos) {
			tPactInfo.setProductInfo(productService.getStrId(tPactInfo.getProductId()));
			tPactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(tPactInfo.getCustId()).get(0));
		}
		ServletActionContext.getRequest().setAttribute("pactInfos", pactInfos);
			ServletActionContext.getRequest().setAttribute("away","PZoffline");
		return "onLineReviews";
	}
	
	
	/**
	 * 查询all合同复审
	 */
	public String pactRecheck(){
		//查询需要上层领导审核信息
		List<TPactInfo>pactInfos=pactInfoService.findAllToPactRecheck();
		for (TPactInfo tPactInfo : pactInfos) {
			tPactInfo.setProductInfo(productService.getStrId(tPactInfo.getProductId()));
			tPactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(tPactInfo.getCustId()).get(0));
		}
		ServletActionContext.getRequest().setAttribute("pactInfos", pactInfos);
		return "toPactRecheck";
	}
	
	/**
	 * 合同复审通过与不通过
	 */
	public String YNpactRecheck(){
		String pactId=ServletActionContext.getRequest().getParameter("pactId");
		String param=ServletActionContext.getRequest().getParameter("param");
		pactInfo=pactInfoService.get(pactId);
		try {
			pactInfoService.YNPactRecheck(pactInfo,param);	
			InsertRepay(pactInfoService.get(pactId));//模拟熊健程序
		} catch (Exception e) {
			e.printStackTrace();
		}
		//再次查询需要合同复审审核信息
		List<TPactInfo>pactInfos=pactInfoService.findAllToPactRecheck();
		for (TPactInfo tPactInfo : pactInfos) {
			tPactInfo.setProductInfo(productService.getStrId(tPactInfo.getProductId()));
			tPactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(tPactInfo.getCustId()).get(0));
		}
		ServletActionContext.getRequest().setAttribute("pactInfos", pactInfos);
		return "toPactRecheck";
	}
	
	
	/**
	 * 合同查询
	 */
	public String findPactNum(){
		HttpServletRequest request=ServletActionContext.getRequest();
		String pactNum=request.getParameter("pactNum");//合同号
		Map<String, Object>map=new HashMap<String, Object>();
		map.put("pactNum", pactNum);//合同号
		map.put("custPhone", customBaseInfo.getPhonenum());//客户手机号
		map.put("custPapernum", customBaseInfo.getPapernum());//客户身份号
		request.setAttribute("pactNum", pactNum);
		try {
			//List<TPactInfo>pactInfos=pactInfoService.findByPactNum(pactNum,customBaseInfo);
			//查询结果及分页
			pageBean=pactInfoService.getPageBean(5, page,map);
			pageBean.setActionUrl("pactInfo!findPactNum.action");
		} catch (Exception e) {
			request.setAttribute("flag", "您输入的合同编号不存在,请重新输入!");
			return "findPactNum";
		}
		return "findPactInfoList";
	}
	
	/**
	 * 更新合同编号
	 * @return
	 */
	public String updatePactInfo(){
		HttpServletRequest request=ServletActionContext.getRequest();
		TPactInfo pact=pactInfoService.get(pactInfo.getPactId());
		pact.setContractNumber(pactInfo.getContractNumber());//合同书标号
		pact.setCountEff(pactInfo.getCountEff());//起息日期
		try {
			pactInfoService.saveOrUpdateByEntity(pact);
		} catch (Exception e) {
			e.printStackTrace();
		}
		pactInfo=pactInfoService.get(pactInfo.getPactId());
		pactInfo.setProductInfo(productService.getStrId(pactInfo.getProductId()));
		pactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(pactInfo.getCustId()).get(0));
		List<CheckReceipts>receipts=checkReceiptsService.getByStrIdType(pactInfo.getPactId(),"2");
		pactInfo.setReceipts(receipts);
		request.setAttribute("pactInfo",pactInfo);
		request.setAttribute("flag", "合同编号修改成功");
		return "findPactNum";
	}
	
	/**
	 * 还款管理
	 * @return
	 */
	public String repaymentCustom(){
		List<TAutoRepay>autoRepays=autoRepayService.findAllRepayment();//查找今天要还款的账单
		for (TAutoRepay tAutoRepay : autoRepays) {
			tAutoRepay.setPactInfo(pactInfoService.get(tAutoRepay.getPactId()));
			tAutoRepay.getPactInfo().setProductInfo(productService.get(tAutoRepay.getProductId()));
			tAutoRepay.getPactInfo().setCustomBaseInfo(customBaseInfoService.getByStrId(tAutoRepay.getPactInfo().getCustId()).get(0));
		}
		ServletActionContext.getRequest().setAttribute("autoRepays", autoRepays);
		return "repaymentCustom";
	}
	///////////////////////////////////////////回购产品//////////////////////////////////////////////////////////////
	/**
	 * 回购-----1阶段的回购，，，继续选择产品
	 */
	public String pactHG(){
		HttpServletRequest request=ServletActionContext.getRequest();
		String id=request.getParameter("id");
		pactInfo=pactInfoService.get(id);
		List<TProductInfo>products=productService.findAll();
		CustomBaseInfo cust=customBaseInfoService.getByStrId(pactInfo.getCustId()).get(0);
		ServletActionContext.getRequest().setAttribute("products", products);
		ServletActionContext.getRequest().setAttribute("cust", cust);
		ServletActionContext.getRequest().setAttribute("repayFlag", "01");
		ServletActionContext.getRequest().setAttribute("lastPactId", id);
		return "showProducts";
	}
	
	
	/**
	 * 回购2阶段---旧合约终止及打款给客户账
	 * @return
	 */
	public String pactHG2(){
		String id=ServletActionContext.getRequest().getParameter("id");
		pactInfo=pactInfoService.get(id);
		if (pactInfo==null) {
			ServletActionContext.getRequest().setAttribute("flag", "异常,请稍后再试");
			return "repaymentCustom";
		}
		
		//回购表数据
		TRebuypactInfo rebuy=reBuyPactService.get(pactInfo.getRebuyPactid());
		
		boolean status=true;//判断富有返回标志
		/////////////////////////////////////////////////////
		///----------------------》》》打款给客户富有账户
		//////////////////////////////////////////
		if (status) {
			/**
			 * 回购注意
			 * 1.回购时候回购表数据新增到合约表中
			 * 2.回购数据完成后旧合约状态修改
			 * 	 (1)如果回购资金等于旧合约的本金+利息,合同就此结束6-2
			 * 	 (2)回购金额小于旧合约的本金+利息 ,需要还款到客户账5-2
			 * 3.修改自动还款表数据状态
			 */
			pactInfoService.pactHG2(pactInfo,rebuy);
			ServletActionContext.getRequest().setAttribute("flag", "回购成功");
		}else{
			ServletActionContext.getRequest().setAttribute("flag", "异常,请稍后再试");
		}
		List<TAutoRepay>autoRepays=autoRepayService.findAllRepayment();
		for (TAutoRepay tAutoRepay : autoRepays) {
			tAutoRepay.setPactInfo(pactInfoService.get(tAutoRepay.getPactId()));
			tAutoRepay.getPactInfo().setProductInfo(productService.get(tAutoRepay.getProductId()));
			tAutoRepay.getPactInfo().setCustomBaseInfo(customBaseInfoService.getByStrId(tAutoRepay.getPactInfo().getCustId()).get(0));
		}
		ServletActionContext.getRequest().setAttribute("autoRepays", autoRepays);
		return "repaymentCustom";
	}
	
	/**
	 * 回购2点击后详情
	 */
	public String pactHG2Detail(){
		HttpServletRequest request=ServletActionContext.getRequest();
		String id=request.getParameter("id");
		pactInfo=pactInfoService.get(id);
		pactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(pactInfo.getCustId()).get(0));
		pactInfo.setProductInfo(productService.get(pactInfo.getProductId()));

		rebuypactInfo=reBuyPactService.get(pactInfo.getRebuyPactid());
		rebuypactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(rebuypactInfo.getCustId()).get(0));
		rebuypactInfo.setProductInfo(productService.get(rebuypactInfo.getProductId()));
		return "RepurchaseDetails";
	}
	
///////////////////////////////////////////回购产品//////////////////////////////////////////////////////////////
	/**
	 * 还款管理页面确定还款---4---2
	 * @return
	 */
	public String repaymentYN(){
		String param=ServletActionContext.getRequest().getParameter("param");
		String id=ServletActionContext.getRequest().getParameter("id");
		
		int a=pactInfoService.repaymentYN(id,param);
		if (a==1) {//操作成功
			ServletActionContext.getRequest().setAttribute("flag", "还款成功,请及时处理还款到客户账户");
		}else{
			ServletActionContext.getRequest().setAttribute("flag", "异常,请稍后再试");
		}
		//在次查询还款到期信息
		List<TAutoRepay>autoRepays=autoRepayService.findAllRepayment();
		for (TAutoRepay tAutoRepay : autoRepays) {
			tAutoRepay.setPactInfo(pactInfoService.get(tAutoRepay.getPactId()));
			tAutoRepay.getPactInfo().setProductInfo(productService.get(tAutoRepay.getProductId()));
			tAutoRepay.getPactInfo().setCustomBaseInfo(customBaseInfoService.getByStrId(tAutoRepay.getPactInfo().getCustId()).get(0));
		}
		ServletActionContext.getRequest().setAttribute("autoRepays", autoRepays);
		return "repaymentCustom";
	}
	
	/**
	 * 查询还款到客户账(4-2-----5-2)
	 */
	public String findReimbursementToCustom(){
		List<TPactInfo> pactInfos=pactInfoService.findReimbursementToCustom();
		for (TPactInfo tPactInfo : pactInfos) {
			tPactInfo.setProductInfo(productService.getStrId(tPactInfo.getProductId()));
			tPactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(tPactInfo.getCustId()).get(0));
		}
		
		ServletActionContext.getRequest().setAttribute("pactInfos", pactInfos);
		return "findReimbursementToCustom";
	}
	
	/**
	 * 确定还款
	 */
	public String determineRepay(){
		HttpServletRequest request=ServletActionContext.getRequest();
		String id=request.getParameter("id");
		pactInfo=pactInfoService.get(id);
		double balance=0.00;
		if ("4".equals(Character.toString(pactInfo.getPactFlow()))) {
			/**
			 * 调用富有接口操作
			 * 打款给红歆
			 */
			balance=pactInfo.getAmount()+pactInfo.getBackMoney();
			System.out.println("全部打给红歆");
			request.setAttribute("flag", "由红歆转账客户成功,共"+balance);
		}if ("5".equals(Character.toString(pactInfo.getPactFlow()))) {
			/**
			 * 调用富有接口操作
			 * 打款给客户
			 */
			TRebuypactInfo rebuy=reBuyPactService.get(pactInfo.getRebuyPactid());//回购表数据
			balance=pactInfo.getAmount()+pactInfo.getBackMoney()-rebuy.getAmount();
			System.out.println("还掉剩下的钱======="+balance+"给客户");
			request.setAttribute("flag", "还款客户银行账户成功,共"+balance);
		}
		pactInfo.setPactFlow('6');
		pactInfo.setCheckStart('2');
		pactInfoService.saveOrUpdate(pactInfo);
		List<TPactInfo> pactInfos=pactInfoService.findReimbursementToCustom();
		for (TPactInfo tPactInfo : pactInfos) {
			TRebuypactInfo rebuy=reBuyPactService.get(tPactInfo.getPactId());
			if (rebuy!=null) {
				if (rebuy.getAmount()>=(tPactInfo.getAmount()+tPactInfo.getBackMoney())) {//如果续狗产品钱大于本金+利息
					pactInfos.remove(tPactInfo);
				}
			}
			tPactInfo.setProductInfo(productService.getStrId(tPactInfo.getProductId()));
			tPactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(tPactInfo.getCustId()).get(0));
		}
		request.setAttribute("pactInfos", pactInfos);
		return "findReimbursementToCustom";
	}
	
	/**
	 * 合同明细查询
	 * @return
	 */
	public String getPactInfos(){
		HttpServletRequest request=ServletActionContext.getRequest();
		String no=request.getParameter("no");
		String id=request.getParameter("id");
		String redirect=request.getParameter("redirect");
		pactInfo=pactInfoService.get(id);
		pactInfo.setProductInfo(productService.getStrId(pactInfo.getProductId()));
		pactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(pactInfo.getCustId()).get(0));
		List<CheckReceipts>receipts=checkReceiptsService.getByStrIdType(id,no);
		pactInfo.setReceipts(receipts);
		request.setAttribute("pactInfo",pactInfo);
		if ("online".equals(redirect)) {
			return "getPactInfo4online";
		}else if ("offline".equals(redirect)) {
			return "getPactInfo4offline";
		}else if ("pactRecheck".equals(redirect)) {
			return "pactRecheck";
		}else if ("PZoffline".equals(redirect)) {
			return "getPactInfo4PZoffline";
		}else if ("repayment".equals(redirect)) {
			TAutoRepay autoRepay=autoRepayService.get(id);
			ServletActionContext.getRequest().setAttribute("autoRepay", autoRepay);
			return "getPactInfo4Repayment";
		}else{
			return "getPactInfo";
		}
	}
	
	
	
	/**
	 * 合同作废
	 * @return
	 */
	public String pactZF(){
		HttpServletRequest request=ServletActionContext.getRequest();
		String id=request.getParameter("id");
		TPactInfo pact=pactInfoService.get(id);
		pact.setPactFlow('6');
		pact.setCheckStart('2');
		int a=pactInfoService.saveOrUpdateByEntity(pact);
		System.out.println(a+"000----");
		List<TPactInfo>pactInfos=pactInfoService.findAllReviews();
		for (TPactInfo tPactInfo : pactInfos) {
			tPactInfo.setProductInfo(productService.getStrId(tPactInfo.getProductId()));
			tPactInfo.setCustomBaseInfo(customBaseInfoService.getByStrId(tPactInfo.getCustId()).get(0));
		}
		ServletActionContext.getRequest().setAttribute("pactInfos", pactInfos);
		ServletActionContext.getRequest().setAttribute("flag", "合同作废操作成功");
		ServletActionContext.getRequest().setAttribute("away","online");
		return "onLineReviews";
	}

	
	/**
	 * 模拟熊健写的后台程序
	 * @param tPactInfo
	 * @return
	 */
	public int InsertRepay(TPactInfo tPactInfo){
		int a=1;
		TProductInfo pro=productService.get(tPactInfo.getProductId());
		CustomAccount account=customAccountService.getStrId(tPactInfo.getCustId());
		TAutoRepay repay=new TAutoRepay();
		repay.setPactId(tPactInfo.getPactId());
		repay.setProductId(tPactInfo.getProductId());
		repay.setWorkDate(Date2String8.date2String(new Date()));
		repay.setProductName(pro.getProductName());
		repay.setTakeEff(pro.getTakeEff());
		repay.setLostEff(pro.getLostEff());
		repay.setRepayAccout(account.getAccountFuyou());
		repay.setPayerAccout(pro.getFuyouAccout());
		repay.setCapital(tPactInfo.getAmount());
		repay.setAmount(tPactInfo.getBackMoney());
		repay.setBussDate(Date2String8.date2String(new Date()));
		repay.setBussTime(Date2String8.time2String());
		repay.setBussStart('0');
		repay.setState("01");
		repay.setBackTime(tPactInfo.getBackTime());
		repay.setRebuyFlag(tPactInfo.getRebuyFlag());
		repay.setRebuyPactid(tPactInfo.getRebuyPactid());
		String saveStr=autoRepayService.save(repay);
		if (saveStr==null) {
			a=0;
		}
		return a;
	}
	
	////////////////////////////get----set//////////////////////
	public TPactInfo getPactInfo() {
		return pactInfo;
	}
	
	public void setPactInfo(TPactInfo pactInfo1) {
		pactInfo = pactInfo1;
	}

	public TRebuypactInfo getRebuypactInfo() {
		return rebuypactInfo;
	}

	public void setRebuypactInfo(TRebuypactInfo rebuypactInfo) {
		this.rebuypactInfo = rebuypactInfo;
	}

	public CustomBaseInfo getCustomBaseInfo() {
		return customBaseInfo;
	}

	public void setCustomBaseInfo(CustomBaseInfo customBaseInfo) {
		this.customBaseInfo = customBaseInfo;
	}

	public int getPage() {
		return page;
	}

	public void setPage(int page) {
		this.page = page;
	}

	public PageBean<TPactInfo> getPageBean() {
		return pageBean;
	}

	public void setPageBean(PageBean<TPactInfo> pageBean) {
		this.pageBean = pageBean;
	}
	
}

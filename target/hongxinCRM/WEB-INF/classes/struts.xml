<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN" "http://struts.apache.org/dtds/struts-2.3.dtd">
<struts>
	<!-- 指定由spring负责action对象的创建 -->
	<constant name="struts.objectFactory" value="spring" />
	<!-- 所有匹配*.action的请求都由struts2处理 -->
	<constant name="struts.action.extension" value="action" />
	<!-- 是否启用开发模式 -->
	<constant name="struts.devMode" value="false" />
	<!-- struts配置文件改动后，是否重新加载 -->
	<constant name="struts.configuration.xml.reload" value="true" />
	<!-- 设置浏览器是否缓存静态内容 -->
	<constant name="struts.serve.static.browserCache" value="false" />
	<!-- 请求参数的编码方式 -->
	<constant name="struts.i18n.encoding" value="utf-8" />
	<!-- 每次HTTP请求系统都重新加载资源文件，有助于开发 -->
	<constant name="struts.i18n.reload" value="true" />
	<!-- 文件上传最大值 -->
	<constant name="struts.multipart.maxSize" value="104857600" />
	<!-- 让struts2支持动态方法调用 -->
	<constant name="struts.enable.DynamicMethodInvocation" value="true" />
	<!-- Action名称中是否还是用斜线 -->
	<constant name="struts.enable.SlashesInActionNames" value="false" />
	<!-- 允许标签中使用表达式语法 -->
	<constant name="struts.tag.altSyntax" value="true" />
	
	<constant name="struts.multipart.saveDir" value="/uploads"/>  
	
	<!-- 对于WebLogic,Orion,OC4J此属性应该设置成true -->
	<constant name="struts.dispatcher.parametersWorkaround" value="false" />

	<!-- 用于CRUD Action的parent package -->
	<package name="crud-default" extends="convention-default">
		<!-- 基于paramsPrepareParamsStack, 增加store interceptor保证actionMessage在redirect后不会丢失 -->
		<interceptors>
			<interceptor-stack name="crudStack">
				<interceptor-ref name="store">
					<param name="operationMode">AUTOMATIC</param>
				</interceptor-ref>
				<interceptor-ref name="paramsPrepareParamsStack" />
			</interceptor-stack>
		</interceptors>
		<default-interceptor-ref name="crudStack" />
	</package>
	
	
	
	<!-- 自定义登录拦截器 -->
	<package name="struts2" extends="struts-default">  
		<!-- 定义一个拦截器 -->  
        <interceptors>  
        	<!-- 登陆拦截器 -->
            <interceptor name="loginInterceptor" class="com.hongxin.action.Interceptor.LoginInterceptor"></interceptor>  
            <interceptor-stack name="myStack">  <!-- myStack 定义一个登陆拦截器-->
                <interceptor-ref name="defaultStack" />	<!-- 使用默认拦截器 -->
                <interceptor-ref name="loginInterceptor" />  <!-- 定义一份登陆拦截器栈 -->
            </interceptor-stack>  
            
            <!-- 日志拦截器 -->
            <interceptor name="LogIntercept" class="com.hongxin.action.Interceptor.LogIntercept"></interceptor>
            <interceptor-stack name="myLogStack">
                <interceptor-ref name="LogIntercept" />
                <interceptor-ref name="defaultStack" />
            </interceptor-stack>
        </interceptors>
  
  		<default-interceptor-ref name="myStack"></default-interceptor-ref><!--	使用拦截器  -->
  		
        <!-- 定义全局Result -->  
        <global-results>  
            <!-- 当返回LOGIN视图名时，转入/index.jsp登录页面 -->  
            <result name="login">/toIndex.jsp</result>  
        </global-results>
        </package>
        
        <!-- 用户登录系统 -->
        <package name="default" extends="struts2">
		    <!-- 用户登录 -->
		    <action name="index" class="com.hongxin.action.OA.UserLoginAction" >  
	            <result name="redirect_getLimit" type= "redirectAction">
	              	<param name="actionName">getLimit</param>  
	            	<param name="roleIdList">${roleIdList}</param>
	         </result>
	            <result name="redirect_getAllLimit" type= "redirectAction">getAllLimit</result>
	            <interceptor-ref name="myLogStack"></interceptor-ref>
	        </action>
	        
	        <!-- 加载权限 -->
	        <action name="getLimit" class="com.hongxin.action.OA.UserLoginAction" method="getLimit">  
	            <result name="redirect_myInit" type= "redirectAction">myInit</result>
	        </action>
	        <action name="getAllLimit" class="com.hongxin.action.OA.UserLoginAction" method="getAllLimit">  
	            <result name="redirect_init" type= "redirectAction">init</result>
	        </action>
	       
	       <!-- 获取用户菜单 --> 
	        <action name="init" class="com.hongxin.action.OA.UserLoginAction" method="init">  
	            <result name="main">/main.jsp</result>
	            <interceptor-ref name="myStack"></interceptor-ref>
	        </action>
	        <action name="myInit" class="com.hongxin.action.OA.UserLoginAction" method="myInit">  
	            <result name="main">/main.jsp</result>
	            <interceptor-ref name="myStack"></interceptor-ref>
	        </action>
  		</package>
  		
	<!-- 使用Convention插件,实现约定大于配置的零配置文件风格. 特殊的Result路径在Action类中使用@Result设定. -->
	<include file="struts-user.xml"/>
	<include file="struts-custom.xml"/>
	<include file="struts-pact.xml"/>
	<include file="struts-personnelStructure.xml"/>
	<include file="struts-indexs.xml"/>
	<include file="struts-fundInfo.xml"/>
	<include file="struts-upload.xml"/>
	<include file="struts-paymentNotice.xml"/>
	<include file="struts-autoRepay.xml"/>	
	<include file="struts-organization.xml"/>
	<include file="struts-menu.xml"/>
	<include file="struts-role.xml"/>
</struts>